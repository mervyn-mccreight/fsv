
  obj STACK is pr NAT .
    sorts NeStack Stack .
    subsorts NeStack < Stack .
    op empty : -> Stack .
    op push : Nat Stack -> NeStack .
    op top_ : NeStack -> Nat .
    op pop_ : NeStack -> Stack .

    var N : Nat . var S : Stack .
    eq top push(N,S) = N .
    eq pop push(N,S) = S .
  endo

  *** set show retracts on .

  red top push(2,push(1,push(0,empty))) .
  red top pop push(2,push(1,push(0,empty))) .
  red top pop pop push(2,push(1,push(0,empty))) .
  red top pop pop pop push(2,push(1,push(0,empty))) .

  obj PNAT is
    sorts Pos Nat .
    subsort Pos < Nat .
    op 0 : -> Nat .
    op s_ : Nat -> Pos .
    op _-_ : Nat Nat -> Nat .
    vars N M : Nat .
    [e1] eq N - 0 = N .
    [e2] eq 0 - N = 0 .
    [e3] eq N - N = 0 .
    [e4] eq (s N) - N = s 0 .
    [e5] eq (s N) - (s M) = N - M .
  endo 

  obj ANTIMI is inc PNAT .
    sort Nat? .
    subsort Nat < Nat? .
    op f_ : Nat -> Nat? .
    op f_ : Pos -> Nat .
    var P : Pos .
    [e6] eq f P = P .
    [e7] eq f 0 = s f 0 .
  endo

  start (s f 0) - f 0 .
  *** show term .
  apply -.e7 within term .
  ***> should be f 0 - f 0 .
  ***> get error to apply .e3 at term .
  ***> apply .e3 at term .
  ***> should be: 0
 

  start (s f 0) - f 0 .
  ***> apply .e4 at term .
  ***> should be: s 0
  ***> therefore 0 = 1 .

*** in /users/hanyan/sc/examples/enablesc
*** loading this causes some later examples with retracts to fail!
*** set show retracts on .

  obj BSTACK is pr NAT .
    sorts NeStack Stack Stack? .
    subsorts NeStack < Stack < Stack? .
    op empty : -> Stack .
    op bound : -> Nat .
    eq bound = 3 .

    op push : Nat Stack? -> Stack? .
    op length_ : Stack? -> Nat .

    var N : Nat .  var S : Stack .  var S? : Stack? .
    eq length empty = 0 .
    eq length push(N,S?) = 1 + length S? . 

    *** op-as push : Nat Stack -> NeStack  for push(N,S) if length(S) < bound .
    
    op top_ : NeStack -> Nat .
    op pop_ : NeStack -> Stack .
    eq top push(N,S) = N .
    eq pop push(N,S) = S .
    eq push(N, S) = ~setsort~(NeStack, push(N, S)) if length(S) < bound .
  endo

open .
   red length(empty) .
   red length(push(0,empty)) < bound .
   red length(push(1,push(0,empty))) < bound .
   red top(push(1,push(0,empty))) .
   red top(push(2,push(1,push(0,empty)))) .
   red length(push(2,push(1,push(0,empty)))) < bound .

   ***> the sort constraint is NOT satisfied in the following:
   red top(push(3,push(2,push(1,push(0,empty))))) .

   op overflow : -> Stack? .
   cq push(N,S?) = overflow if length(S?) >= bound .

   red top(push(3,push(2,push(1,push(0,empty))))) .
close


obj FACT is pr RAT .
   op _! : Nat -> Nat .
   eq 0 ! = 1 .
   var N : Nat .
   cq N ! = N *((N - 1)!) if N > 0 .
   var X : NzRat .
   eq r:NzRat>Nat(X) = X - X rem 1 .
endo

red (22 / 7)! .
red (- 22 / 7)! .
red (- 22 / - 7)! .

  ***> points in Cartesian and Polar coordinates
  ***  this requires OBJ3 Version 2 and
  ***  PosFLOAT with builtin subsorts Angle < PosFloat < Float

  in PosFLOAT

  *** notation for squaring
  obj SQ is pr FLOAT .
    var F : Float .
    op _**2 : Float -> Float [prec 2] .
    eq F **2 = F * F .
  endo

  *** points and operations on points
  obj POINT is pr SQ .
    sorts Point Cart NzPolar Origin Polar .
    subsorts Cart Polar < Point .
    subsort NzPolar Origin < Polar .
    op <_,_> : Float Float -> Cart .
    op x_ : Cart -> Float .
    op y_ : Cart -> Float .
    vars X Y : Float .
    eq x < X, Y > = X .
    eq y < X, Y > = Y .

    op [_,_] : PosFloat Angle -> NzPolar .
    op origin : -> Origin .
    op rho_ : Polar -> Float .
    op theta_ : NzPolar -> Angle .
    var Rh : PosFloat .  var Th : Angle .
    eq rho [ Rh, Th ] = Rh .
    eq theta [ Rh, Th ] = Th .
    eq rho(origin) = 0 .

    cq r:Cart>NzPolar(< X, Y >) = [sqrt(X **2 + Y **2),atan(Y / X)] if X > 0 .
    cq r:Cart>NzPolar(< X, Y >) = [sqrt(X **2 + Y **2),pi + atan(Y / X)] if X < 0 .
    cq r:Cart>Polar(< X, Y >) = [sqrt(X **2 + Y **2),atan(Y / X)] if X > 0 .
    cq r:Cart>Polar(< X, Y >) = [sqrt(X **2 + Y **2),pi + atan(Y / X)] if X < 0 .
    cq r:Cart>NzPolar(< 0, Y >) = [ Y, pi / 2 ] if Y > 0 .
    cq r:Cart>Polar(< 0, Y >)   = [ Y, pi / 2 ] if Y > 0 .
    cq r:Cart>NzPolar(< 0, Y >) = [ - Y, (3 * pi) / 2 ] if Y < 0 .
    cq r:Cart>Polar(< 0, Y >)   = [ - Y, (3 * pi) / 2 ] if Y < 0 .
    eq r:Cart>Polar(< 0, 0 >)   = origin .
    eq r:Polar>Cart([ Rh, Th ]) = < Rh * cos(Th), Rh * sin(Th) > .
    eq r:Origin>Cart(origin) = < 0, 0 > .

    op d : Cart Cart -> Float .
    op _+_ : Cart Cart -> Cart .
    var X1 Y1 X2 Y2 : Float .
    eq d(< X1, Y1 >, < X2, Y2 >) = sqrt((X2 - X1)**2 + (Y2 - Y1)**2).
    eq < X1, Y1 > + < X2, Y2 > = < X1 + X2, Y1 + Y2 > .
  endo

  obj TEST is pr POINT .
    ops p1, p2, p3 : -> Polar .
    eq p1 = [ 1, pi ] .
    eq p2 = [ 2, - pi ] .
    eq p3 = [ 1, - pi ] .
  endo

  red x p1 .
  red y p1 .
  red d(p1,p2) .
  red p1 + p2 .
  red rho(p1 + p2) .
  red theta(p1 + p2) .
  red d(p1,p3) .
  red p1 + p3 .
  red rho(p1 + p3) .
  red theta(p1 + p3) .

  obj SCALARM is pr TEST .
    op _*_ : Float Polar -> Polar .
    op _*_ : Float Cart -> Cart .
    vars F X Y : Float .  var Rh : PosFloat .  var Th : Angle .
    eq F * < X, Y > = < F * X, F * Y > .
    cq F * [ Rh, Th ] = [ F * Rh, Th ] if F > 0 .
    cq F * [ Rh, Th ] = [ - F * Rh, pi + Th ] if F < 0 .
    eq 0 * [ Rh, Th ] = origin .
    eq F * origin = origin .
  endo

  red 2 * origin .
  red (2 * origin).Cart .
  red 2 * p1 .
  red (2 *(p1 + p2)).Cart .








/* Generated By:JavaCC: Do not edit this line. BOBJTokenManager.java */
package bobj;
import java.util.*;
import java.io.*;

public class BOBJTokenManager implements BOBJConstants
{
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x20L) != 0L || (active1 & 0x3L) != 0L || (active2 & 0x20000L) != 0L)
            return 26;
         if ((active0 & 0x100000000000000L) != 0L)
            return 55;
         if ((active0 & 0x9040000000000240L) != 0L || (active1 & 0x200000040200000L) != 0L)
            return 56;
         if ((active0 & 0xc00000000000000L) != 0L)
            return 57;
         if ((active0 & 0x62bffffffffff000L) != 0L || (active1 & 0xfdffffffbfdffffcL) != 0L || (active2 & 0xfL) != 0L)
         {
            jjmatchedKind = 140;
            return 56;
         }
         return -1;
      case 1:
         if ((active0 & 0x800000000000000L) != 0L)
            return 58;
         if ((active0 & 0x60821f007fe02000L) != 0L || (active1 & 0x41c404c0079480c0L) != 0L || (active2 & 0x8L) != 0L)
            return 56;
         if ((active0 & 0x23de0ff801fd240L) != 0L || (active1 & 0xbe3bfb3ff84b7f3cL) != 0L || (active2 & 0x7L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 1;
            }
            return 56;
         }
         return -1;
      case 2:
         if ((active0 & 0x8000000000000L) != 0L)
            return 59;
         if ((active0 & 0x20022c0341fd240L) != 0L || (active1 & 0x8109c97f040040cL) != 0L || (active2 & 0x2L) != 0L)
            return 56;
         if ((active0 & 0x37c43f89400000L) != 0L || (active1 & 0xf6eb63280c0f7bf0L) != 0L || (active2 & 0x5L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 2;
            }
            return 56;
         }
         return -1;
      case 3:
         if ((active0 & 0x4000000000000L) != 0L)
            return 59;
         if ((active0 & 0x2238081800d0000L) != 0L || (active1 & 0x65a21005c031ed0L) != 0L || (active2 & 0x1L) != 0L)
            return 56;
         if ((active0 & 0x10443e29420000L) != 0L || (active1 & 0xf8a15e28800c6120L) != 0L || (active2 & 0x4L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 3;
            }
            return 56;
         }
         return -1;
      case 4:
         if ((active0 & 0x10440f08020000L) != 0L || (active1 & 0x40014220000461a0L) != 0L || (active2 & 0x4L) != 0L)
            return 56;
         if ((active0 & 0x200003021400000L) != 0L || (active1 & 0xbcf21c08800a0000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 4;
            }
            return 56;
         }
         return -1;
      case 5:
         if ((active0 & 0x400000000L) != 0L || (active1 & 0x28801008000a0000L) != 0L)
            return 56;
         if ((active0 & 0x200003021400000L) != 0L || (active1 & 0x94730c0080000000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 5;
            return 56;
         }
         return -1;
      case 6:
         if ((active0 & 0x200003000000000L) != 0L || (active1 & 0x8010040080000000L) != 0L)
            return 56;
         if ((active0 & 0x21400000L) != 0L || (active1 & 0x1463080000000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 6;
            }
            return 56;
         }
         return -1;
      case 7:
         if ((active0 & 0x2000000000L) != 0L || (active1 & 0x1000000000000000L) != 0L)
            return 56;
         if ((active0 & 0x21400000L) != 0L || (active1 & 0x463080000000000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 7;
            return 56;
         }
         return -1;
      case 8:
         if ((active0 & 0x21000000L) != 0L || (active1 & 0x20080000000000L) != 0L)
            return 56;
         if ((active0 & 0x400000L) != 0L || (active1 & 0x443000000000000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 8;
            return 56;
         }
         return -1;
      case 9:
         if ((active0 & 0x400000L) != 0L || (active1 & 0x440000000000000L) != 0L)
            return 56;
         if ((active1 & 0x3000000000000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 9;
            return 56;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 12:
         return jjStartNfaWithStates_0(0, 5, 26);
      case 40:
         return jjStopAtPos(0, 144);
      case 41:
         return jjStopAtPos(0, 146);
      case 42:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x240L, 0x40000000L, 0x0L);
      case 43:
         return jjStartNfaWithStates_0(0, 60, 56);
      case 44:
         return jjStartNfaWithStates_0(0, 145, 26);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 56, 55);
      case 58:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L, 0x0L);
      case 60:
         return jjStartNfaWithStates_0(0, 54, 56);
      case 91:
         return jjStartNfaWithStates_0(0, 64, 26);
      case 93:
         return jjStartNfaWithStates_0(0, 65, 26);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x100000000a000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xb00000000000L, 0x8002000380800110L, 0x1L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x600008000L, 0x2000000000000004L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x800019f0000L, 0x10000410000400L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000800L, 0x2L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xd000070000000L, 0x5400040002000000L, 0x0L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x21001000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x8000000L, 0xcL);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x70000001000L, 0x80000c0001000c0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x2000800600000L, 0x400200004c0000L, 0x0L);
      case 113:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x580000000008L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x3180000000L, 0x100001804004020L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4000000000002000L, 0x80202000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0xe000000L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x20000c000000000L, 0x200L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000030000L, 0x0L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L, 0x0L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa2_0(active0, 0x240L, active1, 0x40000000L, active2, 0L);
      case 58:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 59, 58);
         break;
      case 62:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 55, 56);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000c000000000L, active1, 0x20020008080000L, active2, 0x1L);
      case 98:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(1, 131, 56);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0x800800000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(1, 87, 56);
         return jjMoveStringLiteralDfa2_0(active0, 0xd000000000000L, active1, 0x1400000000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x20200000000000L, active1, 0x2008181820000008L, active2, 0L);
      case 102:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000004L, active2, 0L);
      case 104:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000004000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000030200L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 110:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 102, 56);
         return jjMoveStringLiteralDfa2_0(active0, 0x301f0000L, active1, 0x4010040010000400L, active2, 0L);
      case 111:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 62, 56);
         return jjMoveStringLiteralDfa2_0(active0, 0x800180000000L, active1, 0x8002000780001020L, active2, 0x6L);
      case 112:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000000L, active1, 0x20c0L, active2, 0L);
      case 113:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 43, 56);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 44, 56);
         break;
      case 114:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000400000L, active1, 0x40002000040810L, active2, 0L);
      case 115:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(1, 30, 56);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 88, 56);
         return jjMoveStringLiteralDfa2_0(active0, 0x400e0c000000L, active1, 0x1000000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 79, 56);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 114, 56);
         return jjMoveStringLiteralDfa2_0(active0, 0xc000L, active1, 0x4000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000L, active1, 0x200410000000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000L, active2, 0L);
      case 120:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L, active2, 0L);
      case 124:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 61, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40L, active1, 0x40000000L, active2, 0L);
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 58:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 51, 59);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000005000L, active2, 0L);
      case 98:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000000L, active1, 0x80000000L, active2, 0L);
      case 99:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0x40000000000L, active2, 0L);
      case 100:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 86, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0xf0000L, active1, 0x10180010000400L, active2, 0L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000000000L, active1, 0x14c00000000002d0L, active2, 0L);
      case 102:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 98, 56);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 103, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      case 104:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 56);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 56);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0x208000000040000L, active2, 0L);
      case 106:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x410800000020L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x20800000000000L, active1, 0x2200000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 111:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 111, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000e00400000L, active1, 0x4000900L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000002000L, active2, 0L);
      case 113:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 56);
         break;
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 129, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0x204008180000000L, active1, 0x20000080000L, active2, 0x4L);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0x1000000000000L, active2, 0x1L);
      case 116:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 93, 56);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 100, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0x20000000030000L, active2, 0L);
      case 118:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 97, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(3, 6);
         break;
      case 58:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 59);
         break;
      case 62:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 94, 56);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0x80000000L, active2, 0L);
      case 98:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 56);
         break;
      case 99:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40002000000000L, active2, 0L);
      case 100:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 56);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 56);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 56);
         break;
      case 101:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 91, 56);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 109, 56);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 128, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0x800400800080000L, active2, 0L);
      case 104:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000020000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      case 108:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 104, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0x40000002000L, active2, 0L);
      case 109:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 56);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 92, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x402000000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x10000008000000L, active1, 0x1000000000040080L, active2, 0L);
      case 111:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 56);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0x81000000000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0xe00000000L, active1, 0x4000L, active2, 0L);
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200003000000000L, active1, 0x20000000100L, active2, 0L);
      case 116:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 121, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x100420000L, active1, 0x8000000000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000180000000000L, active2, 0L);
      case 118:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 115, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000020L, active2, 0L);
      case 119:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 56);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 90, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0L, active2, 0L);
      case 99:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x801180800000000L, active2, 0L);
      case 101:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 56);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 56);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 101, 56);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 105, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0x8060000000000000L, active2, 0L);
      case 103:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 56);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 56);
         break;
      case 104:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 56);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 130, 56);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000020000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L, active1, 0x2000000000080000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 114:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000000000L, active2, 0L);
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 56);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 56);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 110, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 116:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 56);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 78, 56);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 82, 56);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 126, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0x1000000000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0x2040000000000L, active2, 0L);
      case 121:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 77, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x21000000L, active1, 0x40040000000000L);
      case 101:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 108, 56);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 125, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1001000080000000L);
      case 110:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 81, 56);
         break;
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0x400000000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x3000000000L, active1, 0x20000000000000L);
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 56);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 83, 56);
         break;
      case 116:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 99, 56);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 123, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2080000000000L);
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000000L);
      case 121:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 119, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x3000000000000L);
      case 101:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 106, 56);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000000000L);
      case 102:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 56);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x21000000L, active1, 0x20080000000000L);
      case 115:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 95, 56);
         break;
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 127, 56);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000400000L, active1, 0x1400000000000000L);
      case 119:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 116, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x21000000L, active1, 0x60000000000000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000000L);
      case 115:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 56);
         break;
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x3000000000000L);
      case 121:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 124, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000000000L);
      case 103:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 24, 56);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 29, 56);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 117, 56);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x3000000000000L);
      case 110:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 107, 56);
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L, active1, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 118, 56);
         break;
      case 103:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(9, 22, 56);
         break;
      case 116:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 122, 56);
         break;
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 112, 56);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 113, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x1600L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec10 = {
   0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L
};
static final long[] jjbitVec11 = {
   0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec12 = {
   0x0L, 0xffc000000000L, 0x0L, 0xff8000000000L
};
static final long[] jjbitVec13 = {
   0x0L, 0xffc000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec15 = {
   0x0L, 0x3ffL, 0x0L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 55;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 58:
                  if ((0xfffffcfeffffd9ffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  if ((0xfbffacfe00000000L & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(23);
                  else if (curChar == 58)
                     jjCheckNAdd(23);
                  break;
               case 56:
                  if ((0xfffffcfeffffd9ffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  if ((0xfbffacfe00000000L & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(23);
                  if (curChar == 58)
                     jjCheckNAdd(23);
                  break;
               case 57:
                  if ((0xfffffefeffffd9ffL & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(0, 3);
                  }
                  if (curChar == 58)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(0, 3);
                  }
                  break;
               case 0:
                  if ((0xfffffcfeffffd9ffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  if ((0xfbffacfe00000000L & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(51, 23);
                  else if (curChar == 58)
                     jjCheckNAdd(23);
                  if ((0xf800acfe00000000L & l) != 0L)
                  {
                     if (kind > 141)
                        kind = 141;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(4, 10);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 143)
                        kind = 143;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  else if (curChar == 39)
                     jjAddStates(14, 15);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAddStates(16, 18);
                  }
                  break;
               case 59:
                  if ((0xfffffefeffffd9ffL & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(0, 3);
                  }
                  if ((0xfffffcfeffffd9ffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  if ((0xfbffacfe00000000L & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(23);
                  if (curChar == 58)
                     jjCheckNAdd(23);
                  break;
               case 55:
                  if ((0xfffffefeffffd9ffL & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(0, 3);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(19, 21);
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(0, 3);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 39)
                     jjAddStates(14, 15);
                  break;
               case 4:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if (curChar == 39 && kind > 138)
                     kind = 138;
                  break;
               case 7:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 8:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 5);
                  break;
               case 9:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 10:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 12:
                  if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  break;
               case 13:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 15:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 16:
                  if (curChar == 34 && kind > 139)
                     kind = 139;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 25);
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 19:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 21:
                  if ((0xfbffacfe00000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddStates(0, 3);
                  break;
               case 22:
                  if (curChar == 58)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0xfffffefeffffd9ffL & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddStates(0, 3);
                  break;
               case 24:
                  if (curChar == 46)
                     jjCheckNAdd(23);
                  break;
               case 25:
                  if ((0xfffffcfeffffd9ffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if (curChar != 58)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddStates(0, 3);
                  break;
               case 27:
                  if ((0xf800acfe00000000L & l) != 0L && kind > 141)
                     kind = 141;
                  break;
               case 28:
                  if (curChar == 36 && kind > 142)
                     kind = 142;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L && kind > 143)
                     kind = 143;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(4, 10);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if (curChar != 46)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddStates(26, 28);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddStates(26, 28);
                  break;
               case 35:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddTwoStates(41, 37);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 44:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 37);
                  break;
               case 46:
                  if (curChar != 48)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAddStates(16, 18);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAddTwoStates(48, 2);
                  break;
               case 49:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAddTwoStates(49, 2);
                  break;
               case 50:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(51, 23);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddStates(19, 21);
                  break;
               case 53:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddTwoStates(54, 37);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 58:
                  jjstateSet[jjnewStateCnt++] = 26;
                  if ((0x7ffffffed7ffffffL & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(0, 3);
                  }
                  break;
               case 56:
                  jjstateSet[jjnewStateCnt++] = 26;
                  if ((0x7ffffffed7ffffffL & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(0, 3);
                  }
                  break;
               case 57:
               case 23:
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddStates(0, 3);
                  break;
               case 0:
                  jjstateSet[jjnewStateCnt++] = 26;
                  if ((0x7ffffffed7ffffffL & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(0, 3);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  else if ((0x7800000050000001L & l) != 0L)
                  {
                     if (kind > 141)
                        kind = 141;
                  }
                  break;
               case 59:
                  jjstateSet[jjnewStateCnt++] = 26;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddStates(0, 3);
                  if ((0x7ffffffed7ffffffL & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(0, 3);
                  }
                  break;
               case 55:
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddStates(0, 3);
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 132)
                     kind = 132;
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 6:
                  if (curChar == 92)
                     jjAddStates(32, 34);
                  break;
               case 7:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 13:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 14:
                  if (curChar == 92)
                     jjAddStates(35, 37);
                  break;
               case 15:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 21:
                  if ((0x7ffffffed7ffffffL & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddStates(0, 3);
                  break;
               case 25:
                  jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 27:
                  if ((0x7800000050000001L & l) != 0L && kind > 141)
                     kind = 141;
                  break;
               case 28:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 142)
                     kind = 142;
                  break;
               case 34:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 37:
                  if ((0x5000000050L & l) != 0L && kind > 136)
                     kind = 136;
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(40, 41);
                  break;
               case 43:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(42, 43);
                  break;
               case 47:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAddTwoStates(48, 2);
                  break;
               case 52:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 58:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(0, 3);
                  }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 56:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(0, 3);
                  }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 57:
               case 23:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddStates(0, 3);
                  break;
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(0, 3);
                  }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 26;
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 143)
                        kind = 143;
                  }
                  break;
               case 59:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(0, 3);
                  }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(0, 3);
                  }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 55:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddStates(0, 3);
                  break;
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(11, 13);
                  break;
               case 21:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddStates(0, 3);
                  break;
               case 25:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 142)
                     kind = 142;
                  break;
               case 29:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 143)
                     kind = 143;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 55 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 10)
                     kind = 10;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 41:
         return jjMoveStringLiteralDfa1_1(0x80L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa2_1(active0, 0x80L);
      default :
         return 2;
   }
}
private final int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa3_1(active0, 0x80L);
      default :
         return 3;
   }
}
private final int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(3, 7);
         break;
      default :
         return 4;
   }
   return 4;
}
static final int[] jjnextStates = {
   21, 22, 24, 25, 31, 32, 38, 39, 42, 43, 37, 13, 14, 16, 4, 6, 
   47, 49, 2, 51, 52, 37, 13, 14, 18, 16, 33, 34, 37, 42, 43, 37, 
   7, 8, 10, 15, 17, 19, 35, 36, 40, 41, 44, 45, 53, 54, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec15[i2] & l2) != 0L);
      default : 
         if ((jjbitVec9[i1] & l1) != 0L)
            if ((jjbitVec10[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, 
"\157\142\152", "\164\150", "\142\164\150", "\144\164\150", "\145\156\144\157", 
"\145\156\144\164\150", "\145\156\144\142", "\145\156\144\144", "\145\156\144", "\160\162", 
"\160\162\157\164\145\143\164\151\156\147", "\145\170", "\145\170\164\145\156\144\151\156\147", "\165\163", 
"\165\163\145", "\165\163\151\156\147", "\151\156\143", 
"\151\156\143\154\165\144\151\156\147", "\151\163", "\163\157\162\164", "\163\157\162\164\163", 
"\144\163\157\162\164", "\144\163\157\162\164\163", "\160\163\157\162\164", 
"\163\165\142\163\157\162\164", "\163\165\142\163\157\162\164\163", "\166\141\162", "\166\141\162\163", 
"\157\160", "\157\160\163", "\157\160\55\141\163", "\145\161", "\143\161", "\143\145\161", 
"\141\163\163\157\143", "\143\157\155\155", "\151\144\145\155", "\160\162\145\143", "\151\144\162\72", 
"\151\144\72", "\156\143\157\156\147", "\155\145\155\157", "\74", "\55\76", "\56", 
"\166\141\162\163\55\157\146", "\72", "\72\72", "\53", "\174\174", "\164\157", "\52", "\133", "\135", 
"\144\146\156", "\162\145\144", "\143\162\145\144", "\163\157\154\166\145", 
"\157\160\145\156", "\157\160\145\156\162", "\143\154\157\163\145", "\166\151\145\167", 
"\145\156\144\166", "\146\162\157\155", "\154\157\141\144", "\141\160\160\154\171", 
"\163\164\141\162\164", "\141\164", "\167\151\164\150", "\167\151\164\150\151\156", 
"\160\162\151\156\164", "\160\141\162\145\156\163", "\157\146", "\161", "\160\167\144", "\143\144", 
"\154\163", "\151\156", "\163\150\157\167", "\155\141\153\145", "\145\156\144\155", 
"\154\145\164", "\52\52\52\76", "\143\157\142\141\163\151\163", "\143\157\142", 
"\143\157\166", "\145\157\146", "\163\145\154\145\143\164", "\163\145\164", 
"\164\162\141\143\145", "\157\156", "\157\146\146", "\146\165\154\154", "\160\141\162\163\145", 
"\151\156\143\154\165\144\145", "\162\145\144\165\143\164\151\157\156", "\162\145\144\165\143\145", 
"\164\151\155\145", "\162\165\154\145\163", "\152\142\157", 
"\141\163\163\157\143\151\141\164\151\166\145", "\143\157\155\155\165\164\141\164\151\166\145", "\150\164", 
"\167\145\151\166", "\145\156\144\166\151\145\167", "\147\141\164\150\145\162\151\156\147", 
"\160\162\145\143\145\144\145\156\143\145", "\164\150\145\157\162\171", "\163\150", "\161\165\151\164", 
"\151\144\145\155\160\157\164\145\156\164", "\157\142\152\145\143\164", "\151\144\145\156\164\151\164\171", 
"\144\145\146\151\156\145", "\151\156\160\165\164", "\143\157\156\164\145\170\164", "\143\141\163\145", 
"\146\157\162", "\155\157\162\160\150", "\155\142", null, null, null, null, null, null, null, 
null, null, null, null, null, "\50", "\54", "\51", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "MULTIPLE_LINE_COMMENT", 
   "IN_SINGLE_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 0, -1, 2, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffff001L, 0xffffffffffffffffL, 0x7fd1fL, 
};
static final long[] jjtoSkip = {
   0x4feL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x400L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0xb00L, 0x0L, 0x0L, 
};
private ASCII_UCodeESC_CharStream input_stream;
private final int[] jjrounds = new int[55];
private final int[] jjstateSet = new int[110];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public BOBJTokenManager(ASCII_UCodeESC_CharStream stream)
{
   if (ASCII_UCodeESC_CharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public BOBJTokenManager(ASCII_UCodeESC_CharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(ASCII_UCodeESC_CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 55; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(ASCII_UCodeESC_CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

final void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
}
